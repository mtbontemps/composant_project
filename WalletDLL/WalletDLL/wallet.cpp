////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	wallet.cpp
//
// summary:	Implements the wallet class
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include "wallet.h"

using namespace std;

namespace WalletDLL 
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Tests wallet DLL. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void wallet::walletDLLTest()
	{
		cout << "----------------------------------------------" << endl;
		cout << "                  WALLET DLL                  " << endl;
		cout << "----------------------------------------------" << endl << endl;

		cout << "If this line appears, the DLL has been loaded." << endl << endl;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the transactions. </summary>
	///
	/// <param name="publicKey">	The public key. </param>
	///
	/// <returns>	Empty vector if it fails, else the transactions. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::vector<wallet::Transaction*> wallet::getTransactions(std::string publicKey) 
	{
		std::vector<Transaction*> v(0);

		return v;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the history. </summary>
	///
	/// <param name="publicKey">	The public key. </param>
	///
	/// <returns>	Empty vector if it fails, else the history. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::vector<wallet::Transaction*> wallet::getHistory(std::string publicKey) 
	{
		std::vector<Transaction*> v(0);

		return v;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sum transactions. </summary>
	///
	/// <param name="transactions">	[in,out] If non-null, the transactions. </param>
	///
	/// <returns>	The total number of transactions. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	double wallet::sumTransactions(std::vector<wallet::Transaction*> transactions)
	{
		return 0.0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Creates a new transaction. </summary>
	///
	/// <param name="transaction">	The transaction. </param>
	///
	/// <returns>	True if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool wallet::newTransaction(wallet::Transaction *transaction) 
	{
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sends a transaction. </summary>
	///
	/// <param name="transaction">	The transaction. </param>
	///
	/// <returns>	True if it succeeds, false if it fails. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool wallet::sendTransaction(wallet::Transaction *transaction)
	{
		return false;
	}
}